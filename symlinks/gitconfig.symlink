# set your user tokens as enivornment variables, such as ~/.secrets
# See the README for examples.
[user]
	name = Eugen Tudorancea
	email = eugen.tudorancea@gmail.com

[color]
  ui = true

[color "branch"]
  current = magenta reverse
  local = green
  remote = blue

[color "diff"]
  meta = black
  frag = blue bold
  old = red reverse
  new = green reverse

[alias]
  ls = ls-files --stage

  # add
  a = add                           # add
  u = add -u                        # add + remove/add files
  chunkyadd = add --patch           # stage commits chunk by chunk

  # branch
  b = branch -v                     # branch (verbose)

  # commit
  c = commit -m                     # commit with message
  ca = commit -a -m                 # commit all with message

  amend = commit --amend            # ammend your last commit
  ammend = commit --amend           # ammend your last commit

  # checkout
  ck = checkout                     # checkout
  nb = checkout -b                  # create and switch to a new branch (mnemonic: "git new branch branchname...")

  # cherry-pick
  cp = cherry-pick -x               # grab a change from a branch

  # diff
  d = diff                          # diff unstaged changes
  dc = diff --cached                # diff staged changes
  last = diff HEAD^                 # diff last committed change

  # log
  lol = log --oneline --graph --date=short --decorate --all
  l = log --graph --date=short --decorate --all
  changes = log --pretty=format:\"\n%s\n%Cblue%h %cd %cn %ce%Creset \" --name-status --date=short
  changelog = log --pretty=format:\" * %s\"

  # pull
  pl = pull                         # pull

  # push
  ps = push                         # push

  # rebase
  rc = rebase --continue            # continue rebase
  rs = rebase --skip                # skip rebase

  # merge
  m = merge

  # remote
  r = remote -v                     # show remotes (verbose)

  # reset
  restore = reset --hard HEAD       # reset unstaged/uncommited changes
  unstage = reset HEAD              # remove files from index (tracking)
  uncommit = reset --soft HEAD^     # go back before last commit, with files in uncommitted state
  undo = reset --soft HEAD~1
  filelog = log -u                  # show changes to a file
  mt = mergetool                    # fire up the merge tool

  # stash
  ss = stash                        # stash changes
  sl = stash list                   # list stashes
  sa = stash apply                  # apply stash (restore changes)
  sd = stash drop                   # drop stashes (destory changes)

  # status
  s = status                        # status

  # tag
  t = tag -n                        # show tags with <n> lines of each tag message

[format]
# Format options: http://git-scm.com/book/en/Git-Basics-Viewing-the-Commit-History

[merge]
  summary = true
  verbosity = 1

[apply]
  whitespace = nowarn

[branch]
  autosetupmerge = true

[push]
  # 'git push' will push the current branch to its tracking branch
  # the usual default is to push all branches
  default = tracking

[core]
  autocrlf = false
  editor = /usr/bin/vim
  excludesfile = ~/.gitignore
  quotepath = false

[advice]
  statusHints = false

[diff]
  # Git diff will use (i)ndex, (w)ork tree, (c)ommit and (o)bject
  # instead of a/b/c/d as prefixes for patches
  mnemonicprefix = true

[rerere]
  # Remember my merges
  # http://gitfu.wordpress.com/2008/04/20/git-rerere-rereremember-what-you-did-last-time/
  enabled = true
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
  required = true
	process = git-lfs filter-process
