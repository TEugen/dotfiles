#!/usr/bin/env bash

# check if a command exists
is_command() {
  which $1 &> /dev/null
}


# Parse end return only the semver format
semver() {
  echo $@ | egrep -o '[0-9]*[.][0-9]*[.][0-9]*([0-9A-Za-z-]*)'
}


# Provides a navigable option list
#
# example:
#   list_select "item1 item2 item3" "item2" "do_something"
#
list_select() {
  local items=$1; shift
  local list=($items)
  local length=${#list[@]}
  local selected=$1; shift
  local callback=$@
  local index

  # clear screen
  clear

  # display list
  for (( i = 0; i <= $length; ++i )); do
    local mark=" "

    if [[ ${list[$i]} =~ $selected ]]; then
      mark="❯"
      index=$i
    fi

    echo -e " $mark ${list[$i]}"
  done

  # read key input
  read -s -n 3 key

  case $key in
    $'\033[A') # key up
      index=$([ $index = 0 ] && printf $(($length - 1)) || printf $(($index - 1)))
      list_select "$items" "${list[$index]}" $callback
    ;;

    $'\033[B') # key down
      index=$([ $index = $(($length - 1)) ] && printf 0 || printf $(($index + 1)))
      list_select "$items" "${list[$index]}" $callback
    ;;
    "") # enter
      clear
      $callback $selected
    ;;

    *) clear ;;
  esac
}


##########################################################################################


NODEJS_PATH="$APPS_PATH/node.js"
NODEJS_VERSIONS="$NODEJS_PATH/versions"


get_installed_versions() {
  semver $(ls -d $NODEJS_VERSIONS/*) | sort -u -k 1,1n -k 2,2n -k 3,3n -t .
}


get_active_version() {
  if is_command "node"; then
    semver $(node --version)
  else
    echo "node.js not installed"
  fi
}


set_version() {
  local version=$1

  echo "Setting node.js version ..."
  cp -R -f $NODEJS_VERSIONS/$version/* "$NODEJS_PATH"
  echo "Active node.js version: $(get_active_version)"
}


list() {
  local versions=$(get_installed_versions)
  local active=$(get_active_version)

  list_select "$versions" "$active" "set_version"
}


install() {
  local version="$1"

  case $version in
      latest) version=$(get_latest_version) ;;
    unstable) version=$(get_unstable_version) ;;
  esac

  local dir="$NODEJS_VERSIONS/$version"
  local url=$(get_version_url $version)

  # is version installed?
  if [ -d "$dir" ]; then
    echo "Node.js $version already installed"
  else
    mkdir -p "$dir" && cd $_

    # download and unarchive source
    curl -L# "$url" | tar -zx --strip 1

    set_version "$version"
  fi
}


# make tarball url for <version>
get_version_url() {
  local version=$1
  local arch="x86"
  local os

  case $OSTYPE in
    darwin*) os=darwin ;;
     linux*) os=linux ;;
     sunos*) os=sunos ;;
  esac

  case $(uname -a) in
    *x86_64*) arch=x64 ;;
    *armv6l*) arch=arm-pi ;;
  esac

  echo "http://nodejs.org/dist/v$version/node-v$version-$os-$arch.tar.gz"
}


run() {
  local version="$1"; shift
  local arguments="$@"
  local node="$NODEJS_VERSIONS/$version/bin/node"

  if [ -f "$node" ]; then
    shift;
    $node $arguments
  else
    echo "Node.js $version not installed"
  fi
}


get_all_versions() {
  semver $(curl -# -L http://nodejs.org/dist/ 2> /dev/null) | sort -u -k 1,1n -k 2,2n -k 3,3n -t .
}

get_latest_version() {
  get_all_versions | egrep -o '[0-9]+\.[0-9]*[02468]+\.[a-zA-Z0-9-]+' | tail -n 1
}

get_unstable_version() {
  get_all_versions | tail -n 1
}


remove() {
  local version=$1

  if [ -z $version ]; then
    local versions=$(get_installed_versions)
    local selected=$(get_installed_versions | head -n 1)

    list_select "$versions" "$selected" remove_version
  else
    remove_version $version
  fi
}

remove_version() {
  rm -rf "$NODEJS_VERSIONS/$1" && echo "Node.js $1 removed"
}


help() {
  echo "
  Usage: nvm <command> <options>

  Commands:
    list               List the installed versions
    install            Install the latest stable release
    install <version>  Install specific version
                       <version> could be 'latest', 'unstable', '0.12.01'
    remove <version>   Remove specific version
    run <version>      Execute specific version
    help               Display help

  Aliases:
    ls  list
    i   install
    rm  remove
    h   help
"
}


main() {
  local command=$1

  # create folders if not available
  [ -d "$NODEJS_VERSIONS" ] || mkdir -p "$NODEJS_VERSIONS"

  # parse arguments
  case $command in
        ls|list) list;;
      i|install) shift; install $@;;
      rm|remove) shift; remove $@;;
            run) shift; run $@;;
    -h|--help|*) help;;
  esac
}

main $@
