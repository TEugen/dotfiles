#!/usr/bin/env bash

# check if a command exists
is_command() {
  hash $1 2>/dev/null
}


# Parse end return only the semver format
semver() {
  echo $@ | egrep -o '[0-9]*[.][0-9]*[.][0-9]*([0-9A-Za-z-]*)'
}


# Provides a navigable option list
#
# example:
#   list_select "item1 item2 item3" "item2" "do_something"
#
list_select() {
  local items=$1; shift
  local list=($items)
  local length=${#list[@]}
  local selected=$1; shift
  local callback=$@
  local index

  # clear screen
  clear

  # display list
  for (( i = 0; i <= $length; ++i )); do
    local mark=" "

    if [[ ${list[$i]} =~ $selected ]]; then
      mark="❯"
      index=$i
    fi

    echo -e " $mark ${list[$i]}"
  done

  # read key input
  read -s -n 3 key

  case $key in
    $'\033[A') # key up
      index=$([ $index = 0 ] && printf $(($length - 1)) || printf $(($index - 1)))
      list_select "$items" "${list[$index]}" $callback
    ;;

    $'\033[B') # key down
      index=$([ $index = $(($length - 1)) ] && printf 0 || printf $(($index + 1)))
      list_select "$items" "${list[$index]}" $callback
    ;;
    "") # enter
      clear
      $callback $selected
    ;;

    *) clear ;;
  esac
}


# Prompt a question and wait for a yes/no answer
# ask <string: question> <expression: yes> <expression: no>
ask() {
  echo
  while true; do
    read -n 1 -p "  $1 [y/n] " answer

    case "$answer" in
      [Yy]*) [ -n "$2" ] && $2; break ;;
      [Nn]*) [ -n "$3" ] && $3; break ;;
          *) printf "\n Please type y or n [yes/no] \n";;
    esac
  done
}


###############################################################################


if [ ! -n "$APPS_PATH" ]; then
  echo "APPS_PATH not defined"
  exit 1
fi

MONGODB_PATH="$APPS_PATH/mongodb"
MONGODB_VERSIONS="$MONGODB_PATH/versions"


get_installed_versions() {
  semver $(ls -d $MONGODB_VERSIONS/*) | sort -u -k 1,1n -k 2,2n -k 3,3n -t .
}


get_active_version() {
  if is_command "mongo"; then
    semver $(mongo --version)
  else
    echo "mongodb not installed"
  fi
}


set_version() {
  local version=$1

  echo "Copying bin files ..."
  cp -R -f $MONGODB_VERSIONS/$version/bin "$MONGODB_PATH"
  echo "Active MongoDB version: $(get_active_version)"
}


list() {
  local versions=$(get_installed_versions)
  local active=$(get_active_version)

  list_select "$versions" "$active" "set_version"
}


# Install mongodb <version> binary
install() {
  local version="$1"

  case $version in
      stable) version=$(get_latest_version) ;;
    unstable) version=$(get_unstable_version) ;;
  esac

  local dir="$MONGODB_VERSIONS/$version"
  local url=$(get_version_url $version)

  # is version installed ?
  if [ -d "$dir" ]; then
    echo  "MongoDB $version already installed"
  else
    mkdir -p "$dir" && cd $_

    # download and unarchive source
    curl -L# "$url" | tar -zx --strip 1

    set_version "$version"
  fi
}


# make tarball url for <version>
get_version_url() {
  local version=$1
  local arch="x86"
  local os

  case $OSTYPE in
    darwin*) os="osx" ;;
     linux*) os="linux" ;;
     sunos*) os="sunos5" ;;
  esac

  case $(uname -a) in
    *x86_64*) arch="x86_64" ;;
    *i686*) arch="i686" ;;
    *i386*) arch="i386" ;;
  esac

  echo "http://fastdl.mongodb.org/$os/mongodb-$os-$arch-$version.tgz"
}


get_all_versions() {
  local os

  case $OSTYPE in
    darwin*) os="osx" ;;
     linux*) os="linux" ;;
     sunos*) os="sunos5" ;;
  esac

  semver $(curl -# -L https://www.mongodb.org/dl/$os 2> /dev/null) | sort -u -k 1,1n -k 2,2n -k 3,3n -t .
}

get_latest_version() {
  get_all_versions | egrep -o '[0-9]*[.][0-9]*[02468]*[.][0-9]*([0-9A-Za-z-]*)' | tail -n 1
}

get_unstable_version() {
  get_all_versions | tail -n 1
}


config() {
  local file="$MONGODB_PATH/mongodb.conf"
  local sample="
# For configuration options checkout:
# http://docs.mongodb.org/manual/reference/configuration-options/

systemLog:
  destination: file
  path: $MONGODB_PATH/mongodb.log
  timeStampFormat: iso8601-utc

storage:
  dbPath: $MONGODB_PATH/data
  directoryPerDB: true
"

  if [ -f "$file" ]; then
    ask "File $file exists, overwrite it?" "" "exit"
  fi

  echo "$sample" > "$file"

  ask "Edit $file?" "vi $file"
}


# Run mongod
run() {
  local version="$1"

  if [ -z "$version" ]; then
    local versions=$(get_installed_versions)
    local selected=$(get_installed_versions | head -n 1)

    list_select "$versions" "$selected" run_version
  fi

  $bin $config
}


run_version() {
  local version="$1"
  local bin="$MONGODB_VERSIONS/$version/bin/mongod"
  local config_file="$MONGODB_PATH/mongodb.conf"
  local config

  if [ ! -f "$bin" ]; then
    echo "MongoDB $version is not installed" && exit
  fi

  $bin $([ -f "$config_file" ] && echo "-f $config_file") &
}


# Output usage information.
help() {
  echo "
  Usage: mvm <command> <options>

  Commands:
    list               List the installed versions
    versions           Get all available versions
    install <version>  Install specific version
                       <version> could be 'stable', 'unstable', '3.2.0'
    remove <version>   Remove specific version(s)
    run <version>      Execute specific version
    config             Add configuration file
    help               Display help

  Aliases:
    ls  list
    i   install
    rm  remove
    h   help
"
}


main() {
  local command=$1

  # create folders if not available
  [ -d "$MONGODB_VERSIONS" ] || mkdir -p "$MONGODB_VERSIONS"
  [ -d "$MONGODB_PATH/data" ] || mkdir -p "$MONGODB_PATH/data"

  # parse arguments
  case $command in
        ls|list) list;;
      i|install) shift; install $@;;
      rm|remove) shift; remove $@;;
       versions) shift; get_all_versions;;
         config) shift; config $@;;
            run) shift; run $@;;
    -h|--help|*) help;;
  esac
}


main $@