#!/usr/bin/env bash

# check if a command exists
is_command() {
  which $1 &> /dev/null
}


# Parse end return only the semver format
semver() {
  echo $@ | egrep -o '[0-9]*[.][0-9]*[.][0-9]*([0-9A-Za-z-]*)'
}


# Provides a navigable option list
#
# example:
#   list_select "item1 item2 item3" "item2" "do_something"
#
list_select() {
  local items=$1; shift
  local list=($items)
  local length=${#list[@]}
  local selected=$1; shift
  local callback=$@
  local index

  # clear screen
  clear

  # display list
  for (( i = 0; i <= $length; ++i )); do
    local mark=" "

    if [[ ${list[$i]} =~ $selected ]]; then
      mark="❯"
      index=$i
    fi

    echo -e " $mark ${list[$i]}"
  done

  # read key input
  read -s -n 3 key

  case $key in
    $'\033[A') # key up
      index=$([ $index = 0 ] && printf $(($length - 1)) || printf $(($index - 1)))
      list_select "$items" "${list[$index]}" $callback
    ;;

    $'\033[B') # key down
      index=$([ $index = $(($length - 1)) ] && printf 0 || printf $(($index + 1)))
      list_select "$items" "${list[$index]}" $callback
    ;;
    "") # enter
      clear
      $callback $selected
    ;;

    *) clear ;;
  esac
}


##########################################################################################


REDIS_PATH="$APPS_PATH/redis"
REDIS_VERSIONS="$REDIS_PATH/versions"


get_installed_versions() {
  semver $(ls -d $REDIS_VERSIONS/*) | sort -u -k 1,1n -k 2,2n -k 3,3n -t .
}


get_active_version() {
  if is_command "redis-server"; then
    semver $(redis-server --version)
  else
    echo "redis is not installed"
  fi
}


set_version() {
  local version=$1

  echo "Setting redis version ..."
  cp -R -f "$REDIS_VERSIONS/$version/src" "$REDIS_PATH/bin"
  echo "Active redis version: $(get_active_version)"
}


list() {
  local versions=$(get_installed_versions)
  local active=$(get_active_version)

  list_select "$versions" "$active" "set_version"
}


install() {
  local version="$1"

  case $version in
    latest) version=$(get_latest_version) ;;
  esac

  local dir="$REDIS_VERSIONS/$version"
  local url="http://download.redis.io/releases/redis-$version.tar.gz"

  # is version installed?
  if [ -d "$dir" ]; then
    echo "redis $version already installed"
  else
    mkdir -p "$dir" && cd $_

    # download and unarchive source
    curl -L# "$url" | tar -zx --strip 1

    cd "$REDIS_VERSIONS/$version"
    make

    set_version "$version"
  fi
}


run() {
  local version="$1"

  if [ -z "$version" ]; then
    local versions=$(get_installed_versions)
    local selected=$(get_installed_versions | head -n 1)

    list_select "$versions" "$selected" run_version
  fi

  $bin $config
}


run_version() {
  local version="$1"
  local bin="$REDIS_VERSIONS/$version/src/redis-server"

  if [ ! -f "$bin" ]; then
    echo "redis $version is not installed" && exit
  fi

  cd $REDIS_PATH && $bin &
}


get_all_versions() {
  semver $(curl -# -L http://download.redis.io/releases/ 2> /dev/null) | sort -u -k 1,1n -k 2,2n -k 3,3n -t .
}


get_latest_version() {
  get_all_versions | tail -n 1
}


remove() {
  local version=$1

  if [ -z $version ]; then
    local versions=$(get_installed_versions)
    local selected=$(get_installed_versions | head -n 1)

    list_select "$versions" "$selected" remove_version
  else
    remove_version $version
  fi
}


remove_version() {
  rm -rf "$REDIS_VERSIONS/$1" && echo "redis $1 removed"
}


help() {
  echo "
  Usage: rvm <command> <options>

  Commands:
    list               List the installed versions
    install            Install the latest stable release
    install <version>  Install specific version
                       <version> could be 'latest', 'unstable', '0.12.01'
    remove <version>   Remove specific version
    run <version>      Execute specific version
    help               Display help

  Aliases:
    ls  list
    i   install
    rm  remove
    h   help
"
}


main() {
  local command=$1

  # create folders if not available
  [ -d "$REDIS_VERSIONS" ] || mkdir -p "$REDIS_VERSIONS"

  # parse arguments
  case $command in
        ls|list) list;;
      i|install) shift; install $@;;
      rm|remove) shift; remove $@;;
            run) shift; run $@;;
    -h|--help|*) help;;
  esac
}

main $@
